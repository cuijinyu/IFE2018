<template>
    <div class="san-form-item">
        <div class="san-form-label-wrap san-form-label-{{labelPosition}}"
             style="width:{{labelWidth}}">
            <label class="san-form-label">
                <span s-if="require"
                      class="san-form-required">*</span>
                {{label}}
            </label>
        </div>
        <div class="san-form-input">
            <slot></slot>
        </div>
        <div class="san-bottom-message">
            <div class="san-form-error-{{labelPosition}} san-form-error"
                 s-if="validateStatus == 'validateWrong'"
                 style="position:relative;left:{{labelWidth}}">
                <span>{{error}}</span>
            </div>
        </div>
    </div>
</template>

<script>
    import schema from 'async-validator';
    export default {
        initData:function () {
            return{
                labelPosition:"left",//标签位置，默认为left
                label:"",
                labelWidth:"100px",
                prop:"",//formModel中的字段
                require:false,//是否必填项
                helpText:"",//帮助信息
                rules:undefined,
                validateState:false,//验证状态
                error:undefined,//错误信息，外部传入，改变组件状态，仅作提示
                value:"",//slot中的input表单值
                form:undefined,//将父组件form存放于这里
                validateStatus:'notValidated',//验证状态，默认为为验证
                success:true,//表单正确状态，默认为true，用以判断样式
                input:'',
                type:undefined,
            }
        },
        messages:{
            'init-form-input':function (message) {
                this.data.set('input',message.value);
                this.data.get('input').data.set('placeholder',this.data.get('helpText'));
                this.data.set('type','input');
            },
            'init-form-button':function (message) {

                this.data.set('type','button');
            }
        },
        created(){
            /**
             *  当form-item被附加到页面时，向父组件发送自己的信息
             */
            this.dispatch('init-form-item',this);
            this.getForm();
            this.watch('validateStatus',function () {
                if(this.data.get('validateStatus') == 'validateWrong') {
                    this.data.get('input').data.set('error', true);
                }else if(this.data.get('validateStatus') == 'notValidated'){
                    this.data.get('input').data.set('error', false);
                }else if(this.data.get('validateStatus') == 'validateSuccess') {
                    this.data.get('input').data.set('error', false);
                }
            });
        },

        /**
         * 用以判断该输入框是否有验证规则
         */
        hasRules(){
            let prop = this.data.get('prop');

            if(this.data.get('rules') !== undefined||this.data.get('form').data.get('rules').hasOwnProperty(prop)){
                return true;
            }else
                return false;
        },

        execValidate(){
            return new Promise((resolve,reject)=>{
                this.data.set('validateStatus','validatePause');
                let value = this.getPropValue(this.data.get('prop')),
                    rule = this.getRules();

                let label = this.data.get('prop');
                let descriptor = {};

                descriptor[label] = rule;

                let validator = new schema(descriptor),
                    input = {};

                input[label] = this.getPropValue(this.data.get('prop'));

                validator.validate(input,(error,fields)=>{

                    if(error){
                        resolve(error);

                    }else{
                        resolve(null);
                    }

                })
            });
        },
        validate(){
            let _this = this;
            let flag;

            return new Promise((resolve,reject)=>{
                if(this.data.get('type') == 'button'){
                    /**
                     * 不对button做验证
                     */
                    return ;
                }

                if(this.data.get('require') == true){

                    if(this.getPropValue(this.data.get('prop'))==''){
                        this.data.set('validateStatus','validateWrong');
                        this.data.set('error','必选项');
                        _this.data.set('validateStatus','validateWrong');
                        flag = false;
                        return flag;
                    }
                }


                if(!this.hasRules()){
                    /**
                     * 如果没有验证规则，则返回
                     */
                    return ;
                }


                this.execValidate().then(function (row) {
                    if(row == null){
                        _this.data.set('validateStatus','notValidated');
                    }else{

                        _this.data.set('validateStatus','validateWrong');
                        flag = false;

                        let tempText = "";

                        row.forEach(ele=>{
                            tempText += ele.message+'|';
                        });

                        tempText = tempText.slice(0,tempText.length-1);

                        _this.data.set('error',tempText);

                        _this.dispatch('san-form-valid-wrong',_this);
                    }
                }).then(function () {

                        resolve(flag);

                })

            })

        },

        /**
         * 获取slot中的input的值
         * @param prop
         * @returns {*|string}
         */
        getPropValue(prop){
            this.data.set('value',this.parent.parent.data.get("formModel")[prop]);
            return this.parent.parent.data.get("formModel")[prop];
        },

        /**
         * 获取form
         * @returns {Window}
         */
        getForm(){
            this.data.set('form',this.parent.parent);
        },

        getRules(){
            let rules;
            /**
             * 若form-item中存在rule则返回form-item中的rule，否则尝试寻找form中的rule是否有该表单项的，若有返回，没有，返回undefined
             */
            try{

                if(( rules = this.data.get('rules')) !== undefined){
                    return rules;
                }else if((rules = this.data.get('parent').data.get('rules')[this.data.get('prop')]) !== undefined){
                    return rules;
                }else{
                    return undefined;
                }

            }catch(e) {
                console.log(e);
            }
        },

        reset(){

            //如果表单内组件是button
            if(this.data.get('type') == 'button'){
                return ;
            }

            let label = this.data.get('prop');
            this.data.get('form').data.set(`formModel.${label}`,"");
            this.data.set('validateStatus','notValidated');

        },

        disposed(){
            /**
             * 当组件销毁时，从其父组件中注销
             */

            this.dispatch("delete-form-item",this);
        }
    }
</script>

<style scoped>
    .san-form-label-left{
        float: left;
        text-align: center;
    }
    .san-form-label-right{
        float: right;
        text-align: center;
        margin-right: calc(50% - 200px);
    }
    .san-form-item-top{
        line-height: 30px;
        text-align: center;
    }
    .san-form-item{
        width:calc(300px + 35%);
        line-height: 30px;
        margin-top:10px;
        margin-bottom:10px;
    }
    .san-form-required{
        color:red;
    }
    .san-form-error{
        color:red;
    }
    .san-form-error-right{
        position: relative;
        left:0px !important;
    }
    .san-form-error-top{
        position: relative;
        left:0px !important;
    }
    .san-bottom-message{
        min-height: 30px;
    }
</style>